import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

public class CustomBatchUpdate {

    private final JdbcTemplate jdbcTemplate;

    public CustomBatchUpdate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void batchUpdateAndTrackFailures(final List<YourEntity> entities, int chunkSize) {
        String sql = "INSERT INTO your_table (column1, column2) VALUES (?, ?)";

        for (int i = 0; i < entities.size(); i += chunkSize) {
            List<YourEntity> chunk = entities.subList(i, Math.min(i + chunkSize, entities.size()));

            try {
                batchUpdateChunk(sql, chunk);
            } catch (DataAccessException e) {
                // Handle exception and log the failed records within the chunk
                handleFailedRecords(chunk, i);
            }
        }
    }

    private void batchUpdateChunk(String sql, List<YourEntity> chunk) {
        jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                YourEntity entity = chunk.get(i);
                ps.setString(1, entity.getColumn1());
                ps.setString(2, entity.getColumn2());
            }

            @Override
            public int getBatchSize() {
                return chunk.size();
            }
        });
    }

    private void handleFailedRecords(List<YourEntity> failedRecords, int startPosition) {
        // Implement your logic to handle the failed records within the chunk
        // You can log, update status, or perform any necessary actions
        for (int i = 0; i < failedRecords.size(); i++) {
            YourEntity entity = failedRecords.get(i);
            System.out.println("Failed to update record at position " + (startPosition + i) + ": " + entity);
        }
    }
}